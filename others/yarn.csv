spark.yarn.am.memory,512m,"Amount of memory to use for the YARN Application Master in client mode, in the same format as JVM memory strings (e.g. 512m, 2g). In cluster mode, use spark.driver.memory instead.
Use lower-case suffixes, e.g. k, m, g, t, and p, for kibi-, mebi-, gibi-, tebi-, and pebibytes, respectively.",18
spark.yarn.am.cores,1,"Number of cores to use for the YARN Application Master in client mode. In cluster mode, use spark.driver.cores instead.",18
spark.yarn.am.waitTime,100s,"In cluster mode, time for the YARN Application Master to wait for the SparkContext to be initialized. In client mode, time for the YARN Application Master to wait for the driver to connect to it.",18
spark.yarn.submit.file.replication,The default HDFS replication (usually 3),"HDFS replication level for the files uploaded into HDFS for the application. These include things like the Spark jar, the app jar, and any distributed cache files/archives.",18
spark.yarn.stagingDir,Current user's home directory in the filesystem,Staging directory used while submitting applications.,18
spark.yarn.preserve.staging.files,FALSE,"Set to true to preserve the staged files (Spark jar, app jar, distributed cache files) at the end of the job rather than delete them.",18
spark.yarn.scheduler.heartbeat.interval-ms,3000,"The interval in ms in which the Spark application master heartbeats into the YARN ResourceManager. The value is capped at half the value of YARN's configuration for the expiry interval, i.e. yarn.am.liveness-monitor.expiry-interval-ms.",18
spark.yarn.scheduler.initial-allocation.interval,200ms,"The initial interval in which the Spark application master eagerly heartbeats to the YARN ResourceManager when there are pending container allocation requests. It should be no larger than spark.yarn.scheduler.heartbeat.interval-ms. The allocation interval will doubled on successive eager heartbeats if pending containers still exist, untilspark.yarn.scheduler.heartbeat.interval-ms is reached.",18
spark.yarn.max.executor.failures,"numExecutors * 2, with minimum of 3",The maximum number of executor failures before failing the application.,18
spark.yarn.historyServer.address,(none),"The address of the Spark history server, e.g. host.com:18080. The address should not contain a scheme (http://). Defaults to not being set since the history server is an optional service. This address is given to the YARN ResourceManager when the Spark application finishes to link the application from the ResourceManager UI to the Spark history server UI. For this property, YARN properties can be used as variables, and these are substituted by Spark at runtime. For example, if the Spark history server runs on the same node as the YARN ResourceManager, it can be set to ${hadoopconf-yarn.resourcemanager.hostname}:18080.",18
spark.yarn.dist.archives,(none),Comma separated list of archives to be extracted into the working directory of each executor.,18
spark.yarn.dist.files,(none),Comma-separated list of files to be placed in the working directory of each executor.,18
spark.yarn.dist.jars,(none),Comma-separated list of jars to be placed in the working directory of each executor.,18
spark.yarn.dist.forceDownloadSchemes,(none),"Comma-separated list of schemes for which files will be downloaded to the local disk prior to being added to YARN's distributed cache. For use in cases where the YARN service does not support schemes that are supported by Spark, like http, https and ftp.",18
spark.executor.instances,2,"The number of executors for static allocation. With spark.dynamicAllocation.enabled, the initial set of executors will be at least this large.",18
spark.yarn.am.memoryOverhead,"AM memory * 0.10, with minimum of 384","Same as spark.driver.memoryOverhead, but for the YARN Application Master in client mode.",18
spark.yarn.queue,default,The name of the YARN queue to which the application is submitted.,18
spark.yarn.jars,(none),"List of libraries containing Spark code to distribute to YARN containers. By default, Spark on YARN will use Spark jars installed locally, but the Spark jars can also be in a world-readable location on HDFS. This allows YARN to cache it on nodes so that it doesn't need to be distributed each time an application runs. To point to jars on HDFS, for example, set this configuration to hdfs:///some/path. Globs are allowed.",18
spark.yarn.archive,(none),"An archive containing needed Spark jars for distribution to the YARN cache. If set, this configuration replaces spark.yarn.jars and the archive is used in all the application's containers. The archive should contain jar files in its root directory. Like with the previous option, the archive can also be hosted on HDFS to speed up file distribution.",18
spark.yarn.access.hadoopFileSystems,(none),"A comma-separated list of secure Hadoop filesystems your Spark application is going to access. For example, spark.yarn.access.hadoopFileSystems=hdfs://nn1.com:8032,hdfs://nn2.com:8032, webhdfs://nn3.com:50070. The Spark application must have access to the filesystems listed and Kerberos must be properly configured to be able to access them (either in the same realm or in a trusted realm). Spark acquires security tokens for each of the filesystems so that the Spark application can access those remote Hadoop filesystems. spark.yarn.access.namenodes is deprecated, please use this instead.",18
spark.yarn.appMasterEnv.[EnvironmentVariableName],(none),Add the environment variable specified by EnvironmentVariableName to the Application Master process launched on YARN. The user can specify multiple of these and to set multiple environment variables. In cluster mode this controls the environment of the Spark driver and in client mode it only controls the environment of the executor launcher.,18
spark.yarn.containerLauncherMaxThreads,25,The maximum number of threads to use in the YARN Application Master for launching executor containers.,18
spark.yarn.am.extraJavaOptions,(none),"A string of extra JVM options to pass to the YARN Application Master in client mode. In cluster mode, use spark.driver.extraJavaOptions instead. Note that it is illegal to set maximum heap size (-Xmx) settings with this option. Maximum heap size settings can be set with spark.yarn.am.memory",18
spark.yarn.am.extraLibraryPath,(none),Set a special library path to use when launching the YARN Application Master in client mode.,18
spark.yarn.maxAppAttempts,yarn.resourcemanager.am.max-attempts in YARN,The maximum number of attempts that will be made to submit the application. It should be no larger than the global number of max attempts in the YARN configuration.,18
spark.yarn.am.attemptFailuresValidityInterval,(none),"Defines the validity interval for AM failure tracking. If the AM has been running for at least the defined interval, the AM failure count will be reset. This feature is not enabled if not configured.",18
spark.yarn.executor.failuresValidityInterval,(none),Defines the validity interval for executor failure tracking. Executor failures which are older than the validity interval will be ignored.,18
spark.yarn.submit.waitAppCompletion,TRUE,"In YARN cluster mode, controls whether the client waits to exit until the application completes. If set to true, the client process will stay alive reporting the application's status. Otherwise, the client process will exit after submission.",18
spark.yarn.am.nodeLabelExpression,(none),"A YARN node label expression that restricts the set of nodes AM will be scheduled on. Only versions of YARN greater than or equal to 2.6 support node label expressions, so when running against earlier versions, this property will be ignored.",18
spark.yarn.executor.nodeLabelExpression,(none),"A YARN node label expression that restricts the set of nodes executors will be scheduled on. Only versions of YARN greater than or equal to 2.6 support node label expressions, so when running against earlier versions, this property will be ignored.",18
spark.yarn.tags,(none),"Comma-separated list of strings to pass through as YARN application tags appearing in YARN ApplicationReports, which can be used for filtering when querying YARN apps.",18
spark.yarn.keytab,(none),"The full path to the file that contains the keytab for the principal specified above. This keytab will be copied to the node running the YARN Application Master via the Secure Distributed Cache, for renewing the login tickets and the delegation tokens periodically. (Works also with the ""local"" master)",18
spark.yarn.principal,(none),"Principal to be used to login to KDC, while running on secure HDFS. (Works also with the ""local"" master)",18
spark.yarn.kerberos.relogin.period,1m,How often to check whether the kerberos TGT should be renewed. This should be set to a value that is shorter than the TGT renewal period (or the TGT lifetime if TGT renewal is not enabled). The default value should be enough for most deployments.,18
spark.yarn.config.gatewayPath,(none),"A path that is valid on the gateway host (the host where a Spark application is started) but may differ for paths for the same resource in other nodes in the cluster. Coupled with spark.yarn.config.replacementPath, this is used to support clusters with heterogeneous configurations, so that Spark can correctly launch remote processes.
The replacement path normally will contain a reference to some environment variable exported by YARN (and, thus, visible to Spark containers).
For example, if the gateway node has Hadoop libraries installed on /disk1/hadoop, and the location of the Hadoop install is exported by YARN as the HADOOP_HOME environment variable, setting this value to /disk1/hadoop and the replacement path to $HADOOP_HOMEwill make sure that paths used to launch remote processes properly reference the local YARN configuration.",18
spark.yarn.config.replacementPath,(none),See spark.yarn.config.gatewayPath.,18
spark.security.credentials.${service}.enabled,TRUE,"Controls whether to obtain credentials for services when security is enabled. By default, credentials for all supported services are retrieved when those services are configured, but it's possible to disable that behavior if it somehow conflicts with the application being run. For further details please see [Running in a Secure Cluster](running-on-yarn.html#running-in-a-secure-cluster)",18
spark.yarn.rolledLog.includePattern,(none),"Java Regex to filter the log files which match the defined include pattern and those log files will be aggregated in a rolling fashion. This will be used with YARN's rolling log aggregation, to enable this feature in YARN side yarn.nodemanager.log-aggregation.roll-monitoring-interval-seconds should be configured in yarn-site.xml. This feature can only be used with Hadoop 2.6.4+. The Spark log4j appender needs be changed to use FileAppender or another appender that can handle the files being removed while it is running. Based on the file name configured in the log4j configuration (like spark.log), the user should set the regex (spark*) to include all the log files that need to be aggregated.",18
spark.yarn.rolledLog.excludePattern,(none),"Java Regex to filter the log files which match the defined exclude pattern and those log files will not be aggregated in a rolling fashion. If the log file name matches both the include and the exclude pattern, this file will be excluded eventually.",18