spark.mesos.coarse,TRUE,"If set to true, runs over Mesos clusters in ""coarse-grained"" sharing mode, where Spark acquires one long-lived Mesos task on each machine. If set to false, runs over Mesos cluster in ""fine-grained"" sharing mode, where one Mesos task is created per Spark task. Detailed information in 'Mesos Run Modes'.",19
spark.mesos.extra.cores,0,"Set the extra number of cores for an executor to advertise. This does not result in more cores allocated. It instead means that an executor will ""pretend"" it has more cores, so that the driver will send it more tasks. Use this to increase parallelism. This setting is only used for Mesos coarse-grained mode.",19
spark.mesos.mesosExecutor.cores,1.0,"(Fine-grained mode only) Number of cores to give each Mesos executor. This does not include the cores used to run the Spark tasks. In other words, even if no Spark task is being run, each Mesos executor will occupy the number of cores configured here. The value can be a floating point number.",19
spark.mesos.executor.docker.image,(none),"Set the name of the docker image that the Spark executors will run in. The selected image must have Spark installed, as well as a compatible version of the Mesos library. The installed path of Spark in the image can be specified with spark.mesos.executor.home; the installed path of the Mesos library can be specified with spark.executorEnv.MESOS_NATIVE_JAVA_LIBRARY.",19
spark.mesos.executor.docker.forcePullImage,FALSE,Force Mesos agents to pull the image specified in spark.mesos.executor.docker.image. By default Mesos agents will not pull images they already have cached.,19
spark.mesos.executor.docker.parameters,(none),"Set the list of custom parameters which will be passed into the docker run command when launching the Spark executor on Mesos using the docker containerizer. The format of this property is a comma-separated list of key/value pairs. Example:
key1=val1,key2=val2,key3=val3",19
spark.mesos.executor.docker.volumes,(none),"Set the list of volumes which will be mounted into the Docker image, which was set using spark.mesos.executor.docker.image. The format of this property is a comma-separated list of mappings following the form passed to docker run -v. That is they take the form:
[host_path:]container_path[:ro|:rw]",19
spark.mesos.task.labels,(none),"Set the Mesos labels to add to each task. Labels are free-form key-value pairs. Key-value pairs should be separated by a colon, and commas used to list more than one. If your label includes a colon or comma, you can escape it with a backslash. Ex. key:value,key2:a\:b.",19
spark.mesos.executor.home,driver side SPARK_HOME,"Set the directory in which Spark is installed on the executors in Mesos. By default, the executors will simply use the driver's Spark home directory, which may not be visible to them. Note that this is only relevant if a Spark binary package is not specified throughspark.executor.uri.",19
spark.mesos.executor.memoryOverhead,"executor memory * 0.10, with minimum of 384","The amount of additional memory, specified in MB, to be allocated per executor. By default, the overhead will be larger of either 384 or 10% of spark.executor.memory. If set, the final overhead will be this value.",19
spark.mesos.uris,(none),A comma-separated list of URIs to be downloaded to the sandbox when driver or executor is launched by Mesos. This applies to both coarse-grained and fine-grained mode.,19
spark.mesos.principal,(none),Set the principal with which Spark framework will use to authenticate with Mesos.,19
spark.mesos.secret,(none),"Set the secret with which Spark framework will use to authenticate with Mesos. Used, for example, when authenticating with the registry.",19
spark.mesos.role,*,Set the role of this Spark framework for Mesos. Roles are used in Mesos for reservations and resource weight sharing.,19
spark.mesos.constraints,(none),"Attribute based constraints on mesos resource offers. By default, all resource offers will be accepted. This setting applies only to executors. Refer to Mesos Attributes & Resources for more information on attributes.
Scalar constraints are matched with ""less than equal"" semantics i.e. value in the constraint must be less than or equal to the value in the resource offer.
Range constraints are matched with ""contains"" semantics i.e. value in the constraint must be within the resource offer's value.
Set constraints are matched with ""subset of"" semantics i.e. value in the constraint must be a subset of the resource offer's value.
Text constraints are matched with ""equality"" semantics i.e. value in the constraint must be exactly equal to the resource offer's value.
In case there is no value present as a part of the constraint any offer with the corresponding attribute will be accepted (without value check).",19
spark.mesos.driver.constraints,(none),"Same as spark.mesos.constraints except applied to drivers when launched through the dispatcher. By default, all offers with sufficient resources will be accepted.",19
spark.mesos.containerizer,docker,"This only affects docker containers, and must be one of ""docker"" or ""mesos"". Mesos supports two types of containerizers for docker: the ""docker"" containerizer, and the preferred ""mesos"" containerizer. Read more here: http://mesos.apache.org/documentation/latest/container-image/",19
spark.mesos.driver.webui.url,(none),Set the Spark Mesos driver webui_url for interacting with the framework. If unset it will point to Spark's internal web UI.,19
spark.mesos.driver.labels,(none),Mesos labels to add to the driver. See spark.mesos.task.labelsfor formatting information.,19
"spark.mesos.driver.secret.values,spark.mesos.driver.secret.names,spark.mesos.executor.secret.values,spark.mesos.executor.secret.names,",(none),"A secret is specified by its contents and destination. These properties specify a secret's contents. To specify a secret's destination, see the cell below.
You can specify a secret's contents either (1) by value or (2) by reference.
(1) To specify a secret by value, set the spark.mesos.[driver|executor].secret.values property, to make the secret available in the driver or executors. For example, to make a secret password ""guessme"" available to the driver process, set:
spark.mesos.driver.secret.values=guessme

(2) To specify a secret that has been placed in a secret store by reference, specify its name within the secret store by setting the spark.mesos.[driver|executor].secret.names property. For example, to make a secret password named ""password"" in a secret store available to the driver process, set:
spark.mesos.driver.secret.names=password

Note: To use a secret store, make sure one has been integrated with Mesos via a custom SecretResolver module.
To specify multiple secrets, provide a comma-separated list:
spark.mesos.driver.secret.values=guessme,passwd123
or
spark.mesos.driver.secret.names=password1,password2",19
"spark.mesos.driver.secret.envkeys,spark.mesos.driver.secret.filenames,spark.mesos.executor.secret.envkeys,spark.mesos.executor.secret.filenames,",(none),"A secret is specified by its contents and destination. These properties specify a secret's destination. To specify a secret's contents, see the cell above.
You can specify a secret's destination in the driver or executors as either (1) an environment variable or (2) as a file.
(1) To make an environment-based secret, set the spark.mesos.[driver|executor].secret.envkeys property. The secret will appear as an environment variable with the given name in the driver or executors. For example, to make a secret password available to the driver process as $PASSWORD, set:
spark.mesos.driver.secret.envkeys=PASSWORD

(2) To make a file-based secret, set the spark.mesos.[driver|executor].secret.filenames property. The secret will appear in the contents of a file with the given file name in the driver or executors. For example, to make a secret password available in a file named ""pwdfile"" in the driver process, set:
spark.mesos.driver.secret.filenames=pwdfile

Paths are relative to the container's work directory. Absolute paths must already exist. Note: File-based secrets require a customSecretResolver module.
To specify env vars or file names corresponding to multiple secrets, provide a comma-separated list:
spark.mesos.driver.secret.envkeys=PASSWORD1,PASSWORD2
or
spark.mesos.driver.secret.filenames=pwdfile1,pwdfile2",19
spark.mesos.driverEnv.[EnvironmentVariableName],(none),This only affects drivers submitted in cluster mode. Add the environment variable specified by EnvironmentVariableName to the driver process. The user can specify multiple of these to set multiple environment variables.,19
spark.mesos.dispatcher.webui.url,(none),Set the Spark Mesos dispatcher webui_url for interacting with the framework. If unset it will point to Spark's internal web UI.,19
spark.mesos.dispatcher.driverDefault.[PropertyName],(none),"Set default properties for drivers submitted through the dispatcher. For example, spark.mesos.dispatcher.driverProperty.spark.executor.memory=32g results in the executors for all drivers submitted in cluster mode to run in 32g containers.",19
spark.mesos.dispatcher.historyServer.url,(none),Set the URL of the history server. The dispatcher will then link each driver to its entry in the history server.,19
spark.mesos.gpus.max,0,Set the maximum number GPU resources to acquire for this job. Note that executors will still launch when no GPU resources are found since this configuration is just a upper limit and not a guaranteed amount.,19
spark.mesos.network.name,(none),"Attach containers to the given named network. If this job is launched in cluster mode, also launch the driver in the given named network. See the Mesos CNI docs for more details.",19
spark.mesos.network.labels,(none),"Pass network labels to CNI plugins. This is a comma-separated list of key-value pairs, where each key-value pair has the format key:value. Example:
key1:val1,key2:val2
See the Mesos CNI docs for more details.",19
spark.mesos.fetcherCache.enable,FALSE,"If set to `true`, all URIs (example: `spark.executor.uri`, `spark.mesos.uris`) will be cached by the Mesos Fetcher Cache",19
spark.mesos.driver.failoverTimeout,0.0,"The amount of time (in seconds) that the master will wait for the driver to reconnect, after being temporarily disconnected, before it tears down the driver framework by killing all its executors. The default value is zero, meaning no timeout: if the driver disconnects, the master immediately tears down the framework.",19
spark.mesos.rejectOfferDuration,120s,"Time to consider unused resources refused, serves as a fallback of `spark.mesos.rejectOfferDurationForUnmetConstraints`, `spark.mesos.rejectOfferDurationForReachedMaxCores`",19
spark.mesos.rejectOfferDurationForUnmetConstraints,spark.mesos.rejectOfferDuration,Time to consider unused resources refused with unmet constraints,19
spark.mesos.rejectOfferDurationForReachedMaxCores,spark.mesos.rejectOfferDuration,Time to consider unused resources refused when maximum number of cores spark.cores.max is reached,19